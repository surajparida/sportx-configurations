spring:
  security:
    user:
      name: registry
      password: registry

  boot:
    admin:
      notify:
        mail:
          to: suraj.parida@gmail.com
          from: suraj.parida+sportx@gmail.com
      client:
        instance:
          metadata:
            user:
              name: ${spring.security.user.name}
              passowrd: ${spring.security.user.password}
        username: ${spring.security.user.name}
        password: ${spring.security.user.password}

info:
  name: ${spring.application.name}
  description: Sportx Registry Server
  environment: ${spring.profiles.active}
  version: 1.0.0

server:
  port: 8761
  tomcat:
    accesslog:
      enabled: true
      buffered: false
      pattern: '%t %a %m %U%q %s %B %D'
      directory: ${application.global.path}
      rename-on-rotate: true
      prefix: sportx-${spring.application.name}-access
      suffix: .log
      file-date-format: .yyyyMMddHH00


management:
  endpoints:
    web:
      exposure:
        include: '*'
    endpoint:
      health:
        show-details: ALWAYS
  server:
    port: 8762
    servlet:
      context-path: /

eureka:
  instance:
    metadata-map:
      user:
        name: ${spring.security.user.name}
        password: ${spring.security.user.password}
    prefer-ip-address: true
  client:
    register-with-eureka: false
    fetch-registry: false
  server:
    enable-self-preservation: true

logging:
  level:
    org.springframework: WARN

      #eureka:

  #### Information about current client/service for Eureka (Sent while registration)
  #instance:
    #status-page-url: ${server.servletPath}/info     # If secure: https://${eureka.hostname}/info
    #health-check-url: ${server.servletPath}/health  # If secure: https://${eureka.hostname}/health
    #non-secure-port-enabled: true
    #secure-port-enabled: false
    #Indicates the frequency the client sends heartbeats to server to indicate that it is still alive.
    #lease-renewal-interval-in-seconds: 30
    #Indicates the duration the server waits since it received the last heartbeat before it can evict an instance from its registry.
    #lease-expiration-duration-in-seconds: 90

    #health-check-url-path: /actuator/health
    #metadata-map:
      #zone: zone1 #Custom value for zone based deployments   audit can be have zone1 when deployed in zone1
      #startup: ${random.int}    #needed to trigger info and endpoint update after restart
      #user:
        #name: ${spring.security.user.name}
        #password: ${spring.security.user.password}
    #prefer-ip-address: true

  #### Information about current client/service for Eureka (Sent while registration)
  #client:
    #enabled: true   # Flag to indicate that the Eureka client is enabled.

    # When a refresh occurs clients will be unregistered from the Eureka server and there might be a brief moment of
    # time where all instance of a given service are not available

    #refresh:
    #  enable: true
    #healthcheck:
      #enabled: false #If false, will not show up in Admin
    #registryFetchIntervalSeconds: 5
    #serviceUrl:
      #${EUREKA_SERVICE_URL:http://localhost:8761}/eureka/
      #https://cloud.spring.io/spring-cloud-static/Greenwich.SR2/single/spring-cloud.html#_authenticating_with_the_eureka_server
      #defaultZone: http://registry:registry@localhost:8761/eureka/
      #registerWithEureka: true
      #fetchRegistry: true

  #server:
  ## A scheduler is run at this frequency which will evict instances from the registry if the lease of the instances are
  ## expired as configured by lease-expiration-duration-in-seconds. Setting this value too long will delay the system
  ## entering into self-preservation mode.

  #eviction-interval-timer-in-ms: 60 * 1000

  ## This value is used to calculate the expected heartbeats per minute

  #renewal-percent-threshold: 0.85

  ## A scheduler is run at this frequency which calculates the expected heartbeats per minute

  #renewal-threshold-update-interval-ms: 15 * 60 * 1000

  ## Eureka server enters self-preservation mode if the actual number of heartbeats in last minute is less than
  ## the expected number of heartbeats per minute.
  ## enable-self-preservation: false

# If clients = N, renewal-percent-threshold is 0.85
# Heartbeats in 1 minute = 60 / lease-renewal-interval-in-seconds = 60 / 30 = 2
# N instances / min = 2 * N
# Expected minimum heartbeats / min = 2 * N * 0.85
#   ==> 2 * N * 0.85 is calculated in every 15 minutes by default (i.e. renewal-threshold-update-interval-ms)
